// <auto-generated />
using System;
using Planly.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Planly.Persistence.Migrations
{
    [DbContext(typeof(CustomDbContext))]
    [Migration("20210416111406_UseOwnedTypeForCalendarProvider")]
    partial class UseOwnedTypeForCalendarProvider
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Planly.Application.ExternalCalendars.ExternalCalendarKey", b =>
                {
                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalendarId", "Name");

                    b.ToTable("ExternalCalendarKeys");
                });

            modelBuilder.Entity("Planly.DomainModel.ExternalCalendars.ExternalCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ExternalCalendars");
                });

            modelBuilder.Entity("Planly.DomainModel.Schedules.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Planly.DomainModel.Sessions.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Canceled")
                        .HasColumnType("bit");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TaskId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Planly.DomainModel.Tasks.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Abandoned")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("Deadline")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("IdealSessionDuration")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Planly.Persistence.DomainEventWrapper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OccurrenceTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("SuccessfullyProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DomainEvents");
                });

            modelBuilder.Entity("Planly.DomainModel.ExternalCalendars.ExternalCalendar", b =>
                {
                    b.HasOne("Planly.DomainModel.Schedules.Schedule", null)
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Planly.DomainModel.ExternalCalendars.CalendarProvider", "Provider", b1 =>
                        {
                            b1.Property<Guid>("ExternalCalendarId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("Provider");

                            b1.HasKey("ExternalCalendarId");

                            b1.ToTable("ExternalCalendars");

                            b1.WithOwner()
                                .HasForeignKey("ExternalCalendarId");
                        });

                    b.Navigation("Provider")
                        .IsRequired();
                });

            modelBuilder.Entity("Planly.DomainModel.Schedules.Schedule", b =>
                {
                    b.OwnsOne("Planly.DomainModel.Time.HourRange", "ActiveHours", b1 =>
                        {
                            b1.Property<Guid>("ScheduleId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ScheduleId");

                            b1.ToTable("Schedules");

                            b1.WithOwner()
                                .HasForeignKey("ScheduleId");

                            b1.OwnsOne("Planly.DomainModel.Time.TimeOfDay", "End", b2 =>
                                {
                                    b2.Property<Guid>("HourRangeScheduleId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<long>("durationSinceMidnight")
                                        .HasColumnType("bigint");

                                    b2.HasKey("HourRangeScheduleId");

                                    b2.ToTable("Schedules");

                                    b2.WithOwner()
                                        .HasForeignKey("HourRangeScheduleId");
                                });

                            b1.OwnsOne("Planly.DomainModel.Time.TimeOfDay", "Start", b2 =>
                                {
                                    b2.Property<Guid>("HourRangeScheduleId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<long>("durationSinceMidnight")
                                        .HasColumnType("bigint");

                                    b2.HasKey("HourRangeScheduleId");

                                    b2.ToTable("Schedules");

                                    b2.WithOwner()
                                        .HasForeignKey("HourRangeScheduleId");
                                });

                            b1.Navigation("End")
                                .IsRequired();

                            b1.Navigation("Start")
                                .IsRequired();
                        });

                    b.Navigation("ActiveHours")
                        .IsRequired();
                });

            modelBuilder.Entity("Planly.DomainModel.Sessions.Session", b =>
                {
                    b.HasOne("Planly.DomainModel.Schedules.Schedule", null)
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planly.DomainModel.Tasks.Task", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.OwnsOne("Planly.DomainModel.Sessions.SessionDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("SessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("Title");

                            b1.HasKey("SessionId");

                            b1.ToTable("Sessions");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.OwnsOne("Planly.DomainModel.Time.TimeSlot", "Time", b1 =>
                        {
                            b1.Property<Guid>("SessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("EndTime")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("EndTime");

                            b1.Property<DateTimeOffset>("StartTime")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("StartTime");

                            b1.HasKey("SessionId");

                            b1.ToTable("Sessions");

                            b1.WithOwner()
                                .HasForeignKey("SessionId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Time")
                        .IsRequired();
                });

            modelBuilder.Entity("Planly.DomainModel.Tasks.Task", b =>
                {
                    b.HasOne("Planly.DomainModel.Schedules.Schedule", null)
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Planly.DomainModel.Tasks.TaskDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("Title");

                            b1.HasKey("TaskId");

                            b1.ToTable("Tasks");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });

                    b.OwnsOne("Planly.DomainModel.Tasks.TaskProgress", "Progress", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("TimeCompleted")
                                .HasColumnType("bigint")
                                .HasColumnName("TimeCompleted");

                            b1.Property<long>("TimeRequired")
                                .HasColumnType("bigint")
                                .HasColumnName("TimeRequired");

                            b1.HasKey("TaskId");

                            b1.ToTable("Tasks");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Progress")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
