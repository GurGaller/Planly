@inject ActiveHoursService ActiveHoursService
<h3>Active Hours:</h3>
<label>Start time:</label>
<RadzenDatePicker ShowTime="true" TimeOnly="true" DateFormat="HH:mm" @bind-Value="startTime" />
<label>End time:</label>
<RadzenDatePicker ShowTime="true" TimeOnly="true" DateFormat="HH:mm" @bind-Value="endTime" />
<button class="btn btn-primary" @onclick="SaveActiveHoursAsync" disabled="@Unmodified">Save</button>

@code {
    private DateTime startTime;
    private DateTime endTime;
    private DateTime savedStartTime;
    private DateTime savedEndTime;
    public bool Unmodified => startTime == savedStartTime && endTime == savedEndTime;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var activeHours = await ActiveHoursService.GetActiveHoursAsync();
        savedStartTime = startTime = DateTime.Today.Add(activeHours.Start);
        savedEndTime = endTime = DateTime.Today.Add(activeHours.End);
    }

    private async Task SaveActiveHoursAsync()
    {
        await ActiveHoursService.SetActiveHoursAsync(startTime.TimeOfDay, endTime.TimeOfDay);
        savedStartTime = startTime;
        savedEndTime = endTime;

        StateHasChanged();
    }
}