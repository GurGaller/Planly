using System.Threading;
using System.Threading.Tasks;
using MediatR;

namespace Planly.Application
{
	/// <summary>
	/// An object that executes queries.
	/// </summary>
	/// <typeparam name="TQuery">The type of queries this object can execute.</typeparam>
	/// <typeparam name="TResult">The type of result that is generated by the execution of a <typeparamref name="TQuery"/>.</typeparam>
	/// <remarks>Should be implemented for every concrete <see cref="IQuery{TResult}"/></remarks>
	public interface IQueryExecutor<TQuery, TResult> : IRequestHandler<TQuery, TResult>
		where TQuery : IQuery<TResult>
	{
		/// <summary>
		/// Executes a <typeparamref name="TQuery"/>.
		/// </summary>
		/// <param name="query">The query to execute.</param>
		/// <returns>The result of the query.</returns>
		Task<TResult> ExecuteAsync(TQuery query, CancellationToken cancellationToken);

		Task<TResult> IRequestHandler<TQuery, TResult>.Handle(TQuery query, CancellationToken cancellationToken)
		{
			return ExecuteAsync(query, cancellationToken);
		}
	}
}